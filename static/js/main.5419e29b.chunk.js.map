{"version":3,"sources":["Components/Statistics/Statictics.js","Components/FeedbackOptions/FeedbackOptions .js","Components/Section/Section.js","Components/Notification/Notification.js","Components/App/App.js","index.js","Components/App/App.module.css","Components/FeedbackOptions/FeedBackOprions.module.css"],"names":["Statistics","good","netural","bad","total","positivePercentage","FeedbackOptions","options","onLeaveFeedback","bth","style","onClick","className","type","name","Section","children","title","Notification","message","App","state","handleIncrement","e","feedbackName","target","undefined","setState","prevState","countTotalFeedback","Object","values","reduce","acc","value","countPositiveFeedbackPercentage","goodVoice","totalVoice","percentage","Math","round","this","container","totalFeedback","objKey","Component","ReactDOM","render","document","getElementById","module","exports"],"mappings":"yOAqBeA,EAlBK,SAAC,GAAmD,IAAlDC,EAAiD,EAAjDA,KAAMC,EAA2C,EAA3CA,QAASC,EAAkC,EAAlCA,IAAKC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,mBAC7C,OACI,oCACA,oCAAUJ,GACV,uCAAaC,GACb,mCAASC,GACT,qCAAWC,GACX,iDAAuBC,EAAvB,O,gBCWOC,EAjBS,SAAC,GAAiC,EAA/BC,QAAgC,IAAvBC,EAAsB,EAAtBA,gBAE1BC,EAAQC,IAARD,IACR,OACE,yBAAKE,QAASH,GACZ,4BAAQI,UAAWH,EAAKI,KAAK,SAASC,KAAK,QAA3C,QAGA,4BAAQF,UAAWH,EAAKI,KAAK,SAASC,KAAK,WAA3C,WAGA,4BAAQF,UAAWH,EAAKI,KAAK,SAASC,KAAK,OAA3C,SCASC,EAZC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,MAC3B,OACE,iCACGA,GAAS,4BAAKA,GACdD,ICMQE,EAVM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OACE,oCACE,2BAAIA,KC+DKC,E,4MA7DbC,MAAQ,CACNpB,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAEPmB,gBAAkB,SAACC,GACjB,IAAMC,EAAeD,EAAEE,OAAOX,UACTY,IAAjBF,GAGJ,EAAKG,UAAS,SAACC,GAAD,sBACXJ,EAAeI,EAAUJ,GAAgB,O,EAG9CK,mBAAqB,WAGnB,OAFoBC,OAAOC,OAAO,EAAKV,OACbW,QAAO,SAACC,EAAKC,GAAN,OAAiBD,EAAOC,M,EAG3DC,gCAAkC,WAChC,IAAMC,EAAY,EAAKf,MAAMpB,KACvBoC,EAAa,EAAKR,qBACpBS,EAAa,EAIjB,OAHIF,GAA4B,IAAfC,KACfC,EAAaC,KAAKC,MAAOJ,EAAYC,EAAc,MAE9CC,G,uDAGC,IAAD,EACwBG,KAAKpB,MAA5BpB,EADD,EACCA,KAAMC,EADP,EACOA,QAASC,EADhB,EACgBA,IACfuC,EAAchC,IAAdgC,UACFC,EAAgBF,KAAKZ,qBACrBe,EAAS,CAAE3C,OAAMC,UAASC,OAChC,OACE,oCACE,6BAASS,UAAW8B,GAClB,kBAAC,EAAD,CAASzB,MAAO,yBACd,kBAAC,EAAD,CACEV,QAASqC,EACTpC,gBAAiBiC,KAAKnB,mBAGzBqB,EAAgB,EACf,kBAAC,EAAD,CAAS1B,MAAM,cACb,kBAAC,EAAD,CACEhB,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOqC,KAAKZ,qBACZxB,mBAAoBoC,KAAKN,qCAI7B,kBAAC,EAAD,CAAchB,QAAQ,4B,GAvDhB0B,aCHlBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U,kBCHjDC,EAAOC,QAAU,CAAC,UAAY,yB,kBCA9BD,EAAOC,QAAU,CAAC,IAAM,gC","file":"static/js/main.5419e29b.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Statistics = (({good, netural, bad, total, positivePercentage})=>{\r\n    return(\r\n        <>\r\n        <p>Good: {good}</p>\r\n        <p>Netural: {netural}</p>\r\n        <p>Bad: {bad}</p>\r\n        <p>Total: {total}</p>\r\n        <p>Positive feedback: {positivePercentage}%</p>\r\n      </>\r\n    )\r\n})\r\nStatistics.propTypes = {\r\n  good: PropTypes.number,\r\n  netural: PropTypes.number,\r\n  bad: PropTypes.number,\r\n  total: PropTypes.number,\r\n  positivePercentage: PropTypes.number,\r\n}\r\nexport default Statistics;","import React from \"react\";\r\nimport style from \"./FeedBackOprions.module.css\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\r\n  // я так і не зрозумів як мені тут використоувати опції і функцію.\r\n  const { bth } = style;\r\n  return (\r\n    <div onClick={onLeaveFeedback}>\r\n      <button className={bth} type=\"button\" name=\"good\">\r\n        Good\r\n      </button>\r\n      <button className={bth} type=\"button\" name=\"netural\">\r\n        Netural\r\n      </button>\r\n      <button className={bth} type=\"button\" name=\"bad\">\r\n        Bad\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\nexport default FeedbackOptions;\r\nFeedbackOptions.propTypes = {\r\n  onLeaveFeedback: PropTypes.func,\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Section = ({ children, title }) => {\r\n  return (\r\n    <section>\r\n      {title && <h2>{title}</h2>}\r\n      {children}\r\n    </section>\r\n  );\r\n};\r\nSection.propTypes = {\r\n  title: PropTypes.string,\r\n  children: PropTypes.node,\r\n};\r\nexport default Section;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Notification = ({ message }) => {\r\n  return (\r\n    <>\r\n      <p>{message}</p>\r\n    </>\r\n  );\r\n};\r\nNotification.propTypes = {\r\n  message: PropTypes.string,\r\n};\r\nexport default Notification;\r\n","import React, { Component } from \"react\";\r\nimport style from \"./App.module.css\";\r\nimport Statistics from \"../Statistics/Statictics\";\r\nimport FeedbackOptions from \"../FeedbackOptions/FeedbackOptions \";\r\nimport Section from \"../Section/Section\";\r\nimport Notification from \"../Notification/Notification\";\r\n\r\nclass App extends Component {\r\n  state = {\r\n    good: 0,\r\n    netural: 0,\r\n    bad: 0,\r\n  };\r\n  handleIncrement = (e) => {\r\n    const feedbackName = e.target.name;\r\n    if (feedbackName === undefined) {\r\n      return;\r\n    }\r\n    this.setState((prevState) => ({\r\n      [feedbackName]: prevState[feedbackName] + 1,\r\n    }));\r\n  };\r\n  countTotalFeedback = () => {\r\n    const valuesState = Object.values(this.state);\r\n    const total = valuesState.reduce((acc, value) => (acc += value));\r\n    return total;\r\n  };\r\n  countPositiveFeedbackPercentage = () => {\r\n    const goodVoice = this.state.good;\r\n    const totalVoice = this.countTotalFeedback();\r\n    let percentage = 0;\r\n    if (goodVoice || totalVoice !== 0) {\r\n      percentage = Math.round((goodVoice / totalVoice) * 100);\r\n    }\r\n    return percentage;\r\n  };\r\n\r\n  render() {\r\n    const { good, netural, bad } = this.state;\r\n    const { container } = style;\r\n    const totalFeedback = this.countTotalFeedback();\r\n    const objKey = { good, netural, bad }\r\n    return (\r\n      <>\r\n        <section className={container}>\r\n          <Section title={\"Please leave feedback\"}>\r\n            <FeedbackOptions\r\n              options={objKey}\r\n              onLeaveFeedback={this.handleIncrement}\r\n            />\r\n          </Section>\r\n          {totalFeedback > 0 ? (\r\n            <Section title=\"Statistics\">\r\n              <Statistics\r\n                good={good}\r\n                netural={netural}\r\n                bad={bad}\r\n                total={this.countTotalFeedback()}\r\n                positivePercentage={this.countPositiveFeedbackPercentage()}\r\n              />\r\n            </Section>\r\n          ) : (\r\n            <Notification message=\"No feedback given\" />\r\n          )}\r\n        </section>\r\n      </>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./Components/App/App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__2EQ94\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bth\":\"FeedBackOprions_bth__wOXWw\"};"],"sourceRoot":""}